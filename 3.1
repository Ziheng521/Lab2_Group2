#define F_CPU 16000000L
#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>
#include <stdio.h>

#define BUAD 9600
#define BRC ((F_CPU/16/BUAD)-1)
char buffer [8];
int l,c=0;

int adc_value = 0;
int overflow=0;

int main(void)
{
	UBRR0H = (BRC >> 8);
	UBRR0L = BRC;
	UCSR0B |= (1<<TXEN0);
	UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00); // transmit 8 bits
	
	TIMSK1 |= (1 << TOIE1); // TC1 overflow enable
	TCCR1B |= (1 << CS10);
	sei();
	
	
	DDRB |= (1 << DDB5);
	PORTB |= (1 << PORTB5);
	TCCR0A |= (1 << WGM01); //CTC mode
	TCCR0B |= (1 << CS01) | (1 << CS00); //prescaler 64bit
	OCR0A = 0;
	TIMSK0 |= (1 << OCIE0A); //output compare enable*/
	
	

	
	ADCSRA |= ((1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)); //prescaler at 128 so we have an 125Khz clock source
	ADCSRA |= (1<<ADATE); //ADC Auto Trigger Enable
	ADCSRA |= (1<<ADEN); //ADC Enable
	
	ADCSRB |= (1<<ADTS2) | (1<<ADTS1); //ADC Auto Trigger Source Selections(TC1 overflow)
	
	ADMUX |= (1<<REFS0); ADMUX &= ~(1<<REFS1); // Voltage Referrence Selection (Avcc(+5v) as voltage reference)
	ADCSRA |= (1<<ADSC); //Start converting
	sei();

	while (1)
	{
	
	l=sprintf (buffer, "%hu\n",ADC);
	while(c<l)
	{
	UDR0=buffer[c];
	++c;
	while (!(UCSR0A & 0x40));
	UCSR0A |= 0x40;
	}
	c=0;
	}
	

	
	
	}

	ISR(TIMER0_COMPA_vect)
	{
	if (PORTB & (1 << PORTB5))
	{
	PORTB &= ~(1 << PORTB5);// PB5 low
	
	}
	else
	{
	PORTB |= (1 << PORTB5);// PB5 high
	
	}
	
	}


	ISR(TIMER1_OVF_vect)
	{
	
	++overflow;
	if (overflow>400)
	{
	adc_value = -0.0576*ADC+119;//Read the ADC value, really that's just it
	OCR0A = adc_value;
	PORTB |= (1 << PORTB5);
	TIMSK0 |= (1 << OCIE0A); //output compare enable
	sei();
	overflow=0;
	}
	
	
	}
