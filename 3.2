#define F_CPU 16000000
#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>
#include <stdio.h>
char buffer [8];
int overflow=0;
uint16_t n=0, m=0, w=0; // storage 
int main(void)
{

	
	
	DDRB |= 0x02; //PB1 output
	
	DDRB |=((1<<PORTB2)|(1<<PORTB3)|(1<<PORTB4));//set PB2,PB3,PB4 output
	PORTB &= 0xE3;//PB4:2=000
	
	
	
	PORTB |= (1<<PORTB1); //PB1 high
	OCR1A = 10; // set ORC
	TIMSK1 |= (1 << OCIE1A); //set compare A interruption
	TCCR1B |= (1 << CS11); // pre-scaler 8 bits
	
	TIMSK1 |= (1 <<(TOIE1));
	
	sei(); //set i
	
	
	
	
    while (1) 
    {		
		if((0<=w)&(w<=1000)){
			PORTB &= 0xE3;//PB4:2=000
		}
		if((1000<w)&(w<=2000)){
			PORTB &= 0xE3;//clear PB4:2
			PORTB |=(1<<PORTB2);//PB4:2=001			
		}		
		if((2000<w)&(w<=3000)){
			PORTB &= 0xE3;//clear PB4:2
			PORTB |=(1<<PORTB3);//PB4:2=010			
		}
		if((3000<w)&(w<=4000)){
			PORTB &= 0xE3;//clear PB4:2
			PORTB |=((1<<PORTB3)|(1<<PORTB2));//PB4:2=011
		}
		if((4000<w)&(w<=5000)){
			PORTB &= 0xE3;//clear PB4:2
			PORTB |= (1<<PORTB4);//PB4:2=100
		}
		if((5000<w)&(w<=6000)){
			PORTB &= 0xE3;//clear PB4:2
			PORTB |=((1<<PORTB4)|(1<<PORTB2));//PB4:2=101
		}
		if((6000<w)&(w<=7000)){
			PORTB &= 0xE3;//clear PB4:2
			PORTB |=((1<<PORTB4)|(1<<PORTB3));//PB4:2=110
		}
		if((7000<w)&(w<=8000)){
			PORTB &= 0xE3;//clear PB4:2
			PORTB |=((1<<PORTB4)|(1<<PORTB3)|(1<<PORTB2));//PB4:2=111
		}
	}
		

    
}
ISR(TIMER1_OVF_vect)
{
	++overflow;
	if (overflow>1)
	{
		TIMSK1 &= ~(1 << ICIE1); // disable edge interruption
		TIMSK1 |= (1 << OCIE1A); // set compare A interruption
		PORTB |= (1<<PORTB1); //PB1 high
		OCR1A = 10; // set ORC
		TCNT1 = 0;
		TCCR1B |= (1 << CS11); // pre-scaler 8 bits
		sei(); //set i
		
	}
}


ISR(TIMER1_COMPA_vect) //compare A interruption
{
	
	if(PORTB & (1<<PORTB1))
	{

	PORTB &= ~(1 << PORTB1); // PINB1 low
	TIMSK1 &= ~(1 << OCIE1A); // disable compare A interruption
    TIMSK1 |= (1 << ICIE1); // set edge interruption
    TCCR1B |= (1 << ICES1); //rising edge
	sei(); //set i
	
	}
	
}

ISR(TIMER1_CAPT_vect) // edge interruption
{
	if (TCCR1B & (1<< ICES1))
	{
		
		n = ICR1; //store ICR1
		TCCR1B &= ~(1 << ICES1); //falling edge
		
		
	}
	else
	{
		m = ICR1; //store ICR1
		w = m-n; //get the width of the response pulse
		TIMSK1 &= ~(1 << ICIE1); // disable edge interruption
		TIMSK1 |= (1 << OCIE1A); // set compare A interruption
		PORTB |= (1<<PORTB1); //PB1 high
		OCR1A = 10; // set ORC
		TCNT1 = 0;
		TCCR1B |= (1 << CS11); // pre-scaler 8 bits
		sei(); //set i
		
	}
}
